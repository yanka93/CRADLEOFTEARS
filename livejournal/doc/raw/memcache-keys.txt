<uid> userid:<uid>   == $u, 30 min  (in arrayref packed form)
      uidof:<user>   == userid
<uid> uprop:<uid>:<propid> == scalar, 30 minutes
<uid> tags:<uid> == { tagid => { **tag info hashref, see LJ::Tags::get_usertags** } }
<uid> sess:<uid>:<sessid> == sessions row hashref
<uid> bio:<uid> == user bio text

<uid> talkprop:<uid>:<jtalkid> == { propname => $value, ... }
<uid> talksubject:<cid>:<uid>:<jtalkid> == scalar
<uid> talkbody:<cid>:<uid>:<jtalkid> == scalar
<uid> talk2:<uid>:<nodetype>:<nodeid> == packed data
<uid> talk2ct:<uid> == # rows for user
<uid> talkleftct:<uid> == # rows for user

<uid> logtext:<cid>:<uid>:<jitemid> == [ subject, text ]
<uid> logprop:<uid>:<jitemid> == { propname => $value, ... }
<uid> logtag:<uid>:<jitemid> == [ kwid, kwid, kwid, ... ]
<uid> log2:<uid>:<jitemid> == packed data
<uid> log2ct:<uid> == # of rows for user
<uid> log2lt:<uid> == packed data: array of recent log2 entries in rlogtime order, last 2 weeks by default
<uid> rp:<uid>:<jitemid> == scalar, the replycount value

<uid> memkwid:<uid> == hashref of 'memories' keyword ids to keywords.

<uid> dayct:<uid> == arrayref of arrayrefs (see LJ::get_daycounts)

<uid> auc:<uid>:<dom> == last ID from LJ::alloc_user_counter() for $uid/$domain

<themeid> moodthemedata:<themeid> = { $moodid => { 'pic' => $pic, 'w' => $w, 'h' => $h } }

<uid> s1overr:<uid> == overrides for a given user
<uid> s1uc:<uid> == s1usercache row hashref
      s1pubstyc == hashref keyed on styleid with values being rows from s1style table
<styleid> s1styc:<styleid> == s1stylecache row hashref, 30 minutes
<styleid> s1style:<styleid> == hashref of s1style row, without formatdata
<styleid> s1style_all:<styleid> == hashref of s1style row, including formatdata
<styleid> s1stylemap: <styleid> == userid who owns the given styleid

<styleid> s2sl:<styleid> == hashref of s2stylelayers { type => s2lid }
<styleid> s2s:<styleid> == hashref of s2styles row
          s2publayers == memoize LJ::S2::get_public_layers for 10 mins          
<layerid> s2lo:<layerid> == userid of the owner of this layer
<layerid> s2c:<layerid> == arrayref; [ compile time, compiled data (or 0 meaning no data) ]

<uid> checkfriends:<uid>:<mask> == scalar maxupdate, expires after refresh interval
<uid> frgmask:<uid>:<uid_friend>  -- scalar numeric mask, 15 minutes
<uid> fgrp:<uid> == packed data, friendgroup rows for a given user
<uid> friends:<uid> == packed data, friends rows for a user
<uid> friendofs:<uid> == packed data, friendofs for a user
<uid> tu:<uid> == packed number: unixtime when user last updated
      popsyn == 100 most read syndicated accounts [user, userid, synurl, numreaders], 1 hour

sysban:ip == hashref of ip => unix expiration time
sysban:uniq == hashref of uniq => unix expiration time

<picid> userpic.<picid> == hashref-as-arrayref (ARRAYFMT: 'userpic' in LJ::MemCache)
<uid> upicinf:<uid> == packed data, userpic keywords
<uid> upiccom:<uid> == packed data, userpic comments
<uid> upicurl:<uid> == packed data, userpic urls
<picid> mogp.up.<picid> == arrayref of paths (URLs)

rate_eperr:<email_address> == rate limiting errors sent via email for email gateway
rate:tracked:<userid> == cluster tracking on login, posts, and comments

ml.<lang>.<dmid>.<code>

includefile:<name> == text of BML include file

<intid> introw:<intid> -- arrayref of [ $intid, $interest, $intcount ]
<uid>   intids:<uid>   -- arrayref of intids for this userid

<uid> rel:<uid>:<targetid>:<rel> == [{0|1}, as_of_time]
<uid> relmodu:<uid>:<rel> == as_of_time, updated when rel edges of uid change
<targetid> relmodt:<targetid>:<rel> == as_of_time, updated when rel edges of targetid change

<uid>   memct:<uid>    -- number of memories user has

<uid>   lastcomm:<uid> -- id of the last comment the user posted via quickreply
