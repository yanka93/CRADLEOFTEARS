<html><head><title>Console Reference</title></head>
<body>

[ <a href="./">console</a> | reference ]

<P><B>Grammar</B>
<BR>Think of this like a DOS or <tt>bash</tt> prompt.  The first word is a command.  Every word after that is an argument to that command.  Every command has a different number of required and optional parameters.  White space delimits arguments.  If you need a space in an argument, put double quotes around the whole thing.  If you need double quotes and spaces in an argument, escape the quote with a backslash (\) first.  If you need to do a backslash, escape that with a backslash.
<P>It's pretty straight-forward.  If you're confused, ask.

<P><B>Command Reference</B>
<BR>Arguments in &lt;angle brackets&gt; are required.  Arguments in [brackets] are optional.  If there is more than one optional argument, you can't skip one and provide one after it.  Once you skip one, you have to skip the rest.

<?_code

 use strict;
 use vars qw(%cmd);

 my ($ret, $sth);

 $ret .= "<dl>";
 foreach my $cmdname (sort keys %LJ::Con::cmd) 
 {
     my $cmd = $LJ::Con::cmd{$cmdname};
     next if ($cmd->{'hidden'});

     my $args = LJ::ehtml($cmd->{'argsummary'});
     my $anchor = "cmd.$cmdname";
     $ret .= "<a name='$anchor'><dt><p><table width=100% cellpadding=2><tr><td bgcolor=#d0d0d0>";
     $ret .= "<tt><a style='text-decoration: none' href='\#$anchor'><b>$cmdname</b></a> $args</tt></td></tr></table>";
     $ret .= "</dt><dd><p>$cmd->{'des'}";
     if ($cmd->{'args'}) {
         my @des = @{$cmd->{'args'}};
         $ret .= "<p><dl>";
         while (my ($arg, $des) = splice(@des, 0, 2)) {
             $ret .= "<dt><b><i>$arg</i></b></dt><dd>$des</dd>";
         }
         $ret .= "</dl>";
     }
     $ret .= "</dd></a>";
 }
 $ret .= "</dl>";
 return $ret;

_code?>

</body></html><?_c <LJDEP>
lib: cgi-bin/console.pl, cgi-bin/ljlib.pl
link: htdocs/admin/console/index.bml
</LJDEP> _c?>
